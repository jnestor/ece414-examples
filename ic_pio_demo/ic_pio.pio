;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
; SET pin 0 should be mapped to your LED GPIO
; PIO input capture program developed by Bruce Land, Cornell

.program capture
; In which we try to use the PIO as a timer
; then blast the captured times to the IN FIFO

	; gpio pin rising edge occurance will be time
	; stamped and transfered to FIFO
	; This program just counts while waiting for the edge,
	; loads a time into the FIFO,
	; Then counts and waits for a falling edge and loops
	;
	set x 0x1f		; init x timer 0x0000001f -- can set only 5 bits
	mov x ::x		; flip the bits into the high positions 0xf8000000

.wrap_target
wait1:
	jmp pin got1 	; wait for rising edge + delay a cycle
	jmp x-- wait1	; loop is 2 cycles (two jmps+cycle-to-jmp) add one wait
got1:
	in x 32		; send the counter to osr and autopush
	;
wait0:
	jmp pin not0
	jmp wait1       ; got the 0, so wait for 1
not0:
	jmp x-- wait0	; loop is 2 cycles
	;
.wrap             ; 


; more about "rollunder" - this will result in not taking the branch
; and falling through to "got1" for the first jmp x-- which
; would be equivalent to registering a spurious rising edge on the input
; on the second jmp x--, this would fall through to the wrap
; which go back to wait1, will also register a spurious rising edge
; since the pin will be 1
; If the state machine is running at 125MHz,
; and X is decremented every other cycle,
; a rollunder will occur once very 68.7 seconds


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, 
//   and configures the SM to output on a particular pin

void capture_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin); // the jump pin
   pio_sm_config c = capture_program_get_default_config(offset);
   sm_config_set_jmp_pin (&c, pin) ; // JMP pin is specified separately as GPIO #, GPIO 4
   // sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_RX) ;  // we dont' need an 8-entry FIFO in our application
   sm_config_set_in_shift (&c, true, true, 1); // autopush the isr to eliminate one instruction
   pio_sm_init(pio, sm, offset, &c);
}
%}